
Trans_supply_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000075c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000007d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00802000  00802000  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000436c  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000020d7  00000000  00000000  00004c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4d  00000000  00000000  00006d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  000077c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021b8  00000000  00000000  00007950  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003a5  00000000  00000000  00009b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00009ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_12>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	cd bf       	out	0x3d, r28	; 61
  b4:	d3 e2       	ldi	r29, 0x23	; 35
  b6:	de bf       	out	0x3e, r29	; 62

000000b8 <__do_clear_bss>:
  b8:	20 e2       	ldi	r18, 0x20	; 32
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e2       	ldi	r27, 0x20	; 32
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a2 30       	cpi	r26, 0x02	; 2
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  cc:	0c 94 ac 03 	jmp	0x758	; 0x758 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <read_ADC>:
{
	uint16_t TempRes = 0;													//Temporary variable for ADC conversion result
	uint16_t Flags = 0;														//Temporary variable for checking interrupt flag
	float VOLT;																//Voltage conversion
	
	ADCA.CTRLA |= (0x01);													//Enable ADCA
  d4:	e0 e0       	ldi	r30, 0x00	; 0
  d6:	f2 e0       	ldi	r31, 0x02	; 2
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
	ADCA.CTRLA |= (0x04);													//Start a conversion on ADCA
  de:	80 81       	ld	r24, Z
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	80 83       	st	Z, r24
#include "handle.h"

float read_ADC(void)
{
	uint16_t TempRes = 0;													//Temporary variable for ADC conversion result
	uint16_t Flags = 0;														//Temporary variable for checking interrupt flag
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
	float VOLT;																//Voltage conversion
	
	ADCA.CTRLA |= (0x01);													//Enable ADCA
	ADCA.CTRLA |= (0x04);													//Start a conversion on ADCA
	
	while(Flags != 1)														//Wait for conversion
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <read_ADC+0x20>
	{
		Flags = (ADCA.INTFLAGS&(0x01));										//Check interrupt flag
  ea:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <__TEXT_REGION_LENGTH__+0x7fda06>
  ee:	82 2f       	mov	r24, r18
  f0:	81 70       	andi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
	float VOLT;																//Voltage conversion
	
	ADCA.CTRLA |= (0x01);													//Enable ADCA
	ADCA.CTRLA |= (0x04);													//Start a conversion on ADCA
	
	while(Flags != 1)														//Wait for conversion
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	c9 f7       	brne	.-14     	; 0xea <read_ADC+0x16>
	{
		Flags = (ADCA.INTFLAGS&(0x01));										//Check interrupt flag
	}
	
	TempRes = ADCA.CH0.RES;													//Read ADC conversion
  f8:	e0 e0       	ldi	r30, 0x00	; 0
  fa:	f2 e0       	ldi	r31, 0x02	; 2
  fc:	64 a1       	ldd	r22, Z+36	; 0x24
  fe:	75 a1       	ldd	r23, Z+37	; 0x25
	ADCA.INTFLAGS &= (0x01);												//Clear interrupt flag
 100:	86 81       	ldd	r24, Z+6	; 0x06
 102:	81 70       	andi	r24, 0x01	; 1
 104:	86 83       	std	Z+6, r24	; 0x06
	ADCA.CTRLA = (0x00);													//Disables ADCA
 106:	10 82       	st	Z, r1
	
	VOLT = ((float)TempRes/0xFFF)*MCU_SUP*10;								//Returns conversion result
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 8d 02 	call	0x51a	; 0x51a <__floatunsisf>
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 ef       	ldi	r19, 0xF0	; 240
 114:	4f e7       	ldi	r20, 0x7F	; 127
 116:	55 e4       	ldi	r21, 0x45	; 69
 118:	0e 94 1b 02 	call	0x436	; 0x436 <__divsf3>
 11c:	23 e3       	ldi	r18, 0x33	; 51
 11e:	33 e3       	ldi	r19, 0x33	; 51
 120:	43 e5       	ldi	r20, 0x53	; 83
 122:	50 e4       	ldi	r21, 0x40	; 64
 124:	0e 94 3f 03 	call	0x67e	; 0x67e <__mulsf3>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e2       	ldi	r20, 0x20	; 32
 12e:	51 e4       	ldi	r21, 0x41	; 65
 130:	0e 94 3f 03 	call	0x67e	; 0x67e <__mulsf3>

	return VOLT;
}
 134:	08 95       	ret

00000136 <stop_TIMER>:

void stop_TIMER(void)
{
	TCC4.CTRLA = TC_CLKSEL_OFF_gc;											//Turn timer off
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f8 e0       	ldi	r31, 0x08	; 8
 13a:	10 82       	st	Z, r1
	TCC4.INTCTRLA &= (0xFC);												//Turn interrupt off
 13c:	86 81       	ldd	r24, Z+6	; 0x06
 13e:	8c 7f       	andi	r24, 0xFC	; 252
 140:	86 83       	std	Z+6, r24	; 0x06
	TCC4.CNT = 0;
 142:	10 a2       	std	Z+32, r1	; 0x20
 144:	11 a2       	std	Z+33, r1	; 0x21
 146:	08 95       	ret

00000148 <start_TIMER>:
}

void start_TIMER(void)
{
	TCC4.CNT = 0;
 148:	e0 e0       	ldi	r30, 0x00	; 0
 14a:	f8 e0       	ldi	r31, 0x08	; 8
 14c:	10 a2       	std	Z+32, r1	; 0x20
 14e:	11 a2       	std	Z+33, r1	; 0x21
	TCC4.INTCTRLA |= (0x01);												//Turn on overflow interrupt
 150:	86 81       	ldd	r24, Z+6	; 0x06
 152:	81 60       	ori	r24, 0x01	; 1
 154:	86 83       	std	Z+6, r24	; 0x06
	TCC4.CTRLA = TC_CLKSEL_DIV8_gc;											//turn on TC and set CLK DIV to 8
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	80 83       	st	Z, r24
 15a:	08 95       	ret

0000015c <enable_DAC>:
}


void enable_DAC(void)
{
	DACA.CTRLA |= DAC_ENABLE_bm;											//Enable DAC
 15c:	e0 e0       	ldi	r30, 0x00	; 0
 15e:	f3 e0       	ldi	r31, 0x03	; 3
 160:	80 81       	ld	r24, Z
 162:	81 60       	ori	r24, 0x01	; 1
 164:	80 83       	st	Z, r24
 166:	08 95       	ret

00000168 <disable_DAC>:
}

void disable_DAC(void)
{
	DACA.CTRLA &= (0xFF&(~DAC_ENABLE_bm));									//Disable DAC
 168:	e0 e0       	ldi	r30, 0x00	; 0
 16a:	f3 e0       	ldi	r31, 0x03	; 3
 16c:	80 81       	ld	r24, Z
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	80 83       	st	Z, r24
 172:	08 95       	ret

00000174 <__vector_12>:
#include "supply.h"

uint16_t GlobOVFCnt;																//Gloabal overflow counter

ISR(TCC4_OVF_vect)																	//Timer counter overflow ISR
{
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	8f 93       	push	r24
 180:	ef 93       	push	r30
 182:	ff 93       	push	r31
	TCC4.INTFLAGS |= 0x01;															//Reset OVF interrupt
 184:	e0 e0       	ldi	r30, 0x00	; 0
 186:	f8 e0       	ldi	r31, 0x08	; 8
 188:	84 85       	ldd	r24, Z+12	; 0x0c
 18a:	81 60       	ori	r24, 0x01	; 1
 18c:	84 87       	std	Z+12, r24	; 0x0c
}
 18e:	ff 91       	pop	r31
 190:	ef 91       	pop	r30
 192:	8f 91       	pop	r24
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <main>:


int main(void)
{
	init_CLK();																		//Sets system clock to 32Mhz
 19e:	0e 94 6e 01 	call	0x2dc	; 0x2dc <init_CLK>
	init_UART();																	//Sets UART @ 115200 Baud
 1a2:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <init_UART>
	init_ADC();																		//Sets ADC registers
 1a6:	0e 94 80 01 	call	0x300	; 0x300 <init_ADC>
	init_DAC();
 1aa:	0e 94 a0 01 	call	0x340	; 0x340 <init_DAC>
	init_TIMER();																	//Sets TIMER registers
 1ae:	0e 94 95 01 	call	0x32a	; 0x32a <init_TIMER>

	PORTA_DIRSET = PIN0_bm;															//Set LED status pin as output
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7fde01>
	PORTA_OUTSET = PIN0_bm;															//Set MCU LED pin
 1b8:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7fde05>

	sei();																			//Enables interrupts
 1bc:	78 94       	sei
	PMIC.CTRL |= PMIC_LOLVLEN_bm;													//Enable low level interrupts
 1be:	e0 ea       	ldi	r30, 0xA0	; 160
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	82 81       	ldd	r24, Z+2	; 0x02
 1c4:	81 60       	ori	r24, 0x01	; 1
 1c6:	82 83       	std	Z+2, r24	; 0x02
	uint8_t Vlevel;																	//Variable for storing V_out level
	
	uint16_t DAC_P120 = 0;															//Variables for storing DAC data		
	uint16_t DAC_P100 = 0;
	uint16_t DAC_P85 = 0;
	uint16_t DAC_P40 = 0;	
 1c8:	c1 2c       	mov	r12, r1
 1ca:	d1 2c       	mov	r13, r1
	uint16_t TimeMS;																//Variable for storing VDip time in MS
	uint8_t Vlevel;																	//Variable for storing V_out level
	
	uint16_t DAC_P120 = 0;															//Variables for storing DAC data		
	uint16_t DAC_P100 = 0;
	uint16_t DAC_P85 = 0;
 1cc:	e1 2c       	mov	r14, r1
 1ce:	f1 2c       	mov	r15, r1
	uint8_t command;																//Variable for storing UART commands
	uint16_t TimeMS;																//Variable for storing VDip time in MS
	uint8_t Vlevel;																	//Variable for storing V_out level
	
	uint16_t DAC_P120 = 0;															//Variables for storing DAC data		
	uint16_t DAC_P100 = 0;
 1d0:	c0 e0       	ldi	r28, 0x00	; 0
 1d2:	d0 e0       	ldi	r29, 0x00	; 0
	
	uint8_t command;																//Variable for storing UART commands
	uint16_t TimeMS;																//Variable for storing VDip time in MS
	uint8_t Vlevel;																	//Variable for storing V_out level
	
	uint16_t DAC_P120 = 0;															//Variables for storing DAC data		
 1d4:	00 e0       	ldi	r16, 0x00	; 0
 1d6:	10 e0       	ldi	r17, 0x00	; 0
	uint16_t DAC_P85 = 0;
	uint16_t DAC_P40 = 0;	

	while (1)
	{
		command = read_UART();														//Fetch command from UART
 1d8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <read_UART>
		switch (command)
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	09 f1       	breq	.+66     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 1e0:	18 f0       	brcs	.+6      	; 0x1e8 <main+0x4a>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	31 f1       	breq	.+76     	; 0x232 <__EEPROM_REGION_LENGTH__+0x32>
 1e6:	76 c0       	rjmp	.+236    	; 0x2d4 <__EEPROM_REGION_LENGTH__+0xd4>
		{
			case CAL:																//Perform V_out calibration
				DAC_P120 = Cal_supply(P120);										//Cal V_out @120%
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	cb 01       	movw	r24, r22
 1ee:	0e 94 a7 01 	call	0x34e	; 0x34e <Cal_supply>
 1f2:	8c 01       	movw	r16, r24
				DAC_P100 = Cal_supply(P100);										//Cal V_out @100%
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	91 e4       	ldi	r25, 0x41	; 65
 1fc:	0e 94 a7 01 	call	0x34e	; 0x34e <Cal_supply>
 200:	ec 01       	movw	r28, r24
				DAC_P85 = Cal_supply(P85);											//Cal V_out @85%
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	cb 01       	movw	r24, r22
 208:	0e 94 a7 01 	call	0x34e	; 0x34e <Cal_supply>
 20c:	7c 01       	movw	r14, r24
				DAC_P40 = Cal_supply(P40);											//Cal V_out @40%
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	cb 01       	movw	r24, r22
 214:	0e 94 a7 01 	call	0x34e	; 0x34e <Cal_supply>
 218:	6c 01       	movw	r12, r24
				write8_UART(0xF0);													//Write Finished	
 21a:	80 ef       	ldi	r24, 0xF0	; 240
 21c:	0e 94 01 02 	call	0x402	; 0x402 <write8_UART>
			break;
 220:	db cf       	rjmp	.-74     	; 0x1d8 <main+0x3a>
			
			case ENABLE:															//V_out is set to 24V 
				DACA.CH0DATA = DAC_P100;											//Sets V_out to 100%
 222:	c0 93 18 03 	sts	0x0318, r28	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 226:	d0 93 19 03 	sts	0x0319, r29	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
				write8_UART(0xF0);													//Write finished
 22a:	80 ef       	ldi	r24, 0xF0	; 240
 22c:	0e 94 01 02 	call	0x402	; 0x402 <write8_UART>
			break;
 230:	d3 cf       	rjmp	.-90     	; 0x1d8 <main+0x3a>
			
			case TEST:																//Fetch time and level then proceed with test
				TimeMS = (uint16_t)read_UART();										//Get time L
 232:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <read_UART>
 236:	88 2e       	mov	r8, r24
 238:	91 2c       	mov	r9, r1
				TimeMS |= ((uint16_t)read_UART()<<8);								//Get time H
 23a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <read_UART>
 23e:	a8 2e       	mov	r10, r24
 240:	b1 2c       	mov	r11, r1
 242:	ba 2c       	mov	r11, r10
 244:	aa 24       	eor	r10, r10
 246:	a8 28       	or	r10, r8
 248:	b9 28       	or	r11, r9
				GlobOVFCnt = 0;														//Reset overflows
 24a:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
 24e:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
				start_TIMER();
 252:	0e 94 a4 00 	call	0x148	; 0x148 <start_TIMER>
				Vlevel = read_UART();												//Read Output level
 256:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <read_UART>
				
				switch (Vlevel)
 25a:	85 35       	cpi	r24, 0x55	; 85
 25c:	a1 f0       	breq	.+40     	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 25e:	28 f4       	brcc	.+10     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 260:	88 23       	and	r24, r24
 262:	d9 f0       	breq	.+54     	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
 264:	88 32       	cpi	r24, 0x28	; 40
 266:	a1 f0       	breq	.+40     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 268:	1b c0       	rjmp	.+54     	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 26a:	84 36       	cpi	r24, 0x64	; 100
 26c:	39 f0       	breq	.+14     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
 26e:	88 37       	cpi	r24, 0x78	; 120
 270:	b9 f4       	brne	.+46     	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
				{
					case 120:
						DACA.CH0DATA = DAC_P120;									//Set to 120%
 272:	00 93 18 03 	sts	0x0318, r16	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 276:	10 93 19 03 	sts	0x0319, r17	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
						break;
 27a:	15 c0       	rjmp	.+42     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
					
					case 100:
						DACA.CH0DATA = DAC_P100;									//Set to 100%
 27c:	c0 93 18 03 	sts	0x0318, r28	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 280:	d0 93 19 03 	sts	0x0319, r29	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
						break;
 284:	10 c0       	rjmp	.+32     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
					
					case 85:
						DACA.CH0DATA = DAC_P85;										//Set to 85%
 286:	e0 92 18 03 	sts	0x0318, r14	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 28a:	f0 92 19 03 	sts	0x0319, r15	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
						break;
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
					
					case 40:
						DACA.CH0DATA = DAC_P40;										//Set to 40%
 290:	c0 92 18 03 	sts	0x0318, r12	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 294:	d0 92 19 03 	sts	0x0319, r13	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
						break;
 298:	06 c0       	rjmp	.+12     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
					
					case 0:
						disable_DAC();												//Set to 0%
 29a:	0e 94 b4 00 	call	0x168	; 0x168 <disable_DAC>
						break;
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
					
					default:
						write8_UART(0xFF);											//Return Error
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	0e 94 01 02 	call	0x402	; 0x402 <write8_UART>
						break;	
				}

				while (GlobOVFCnt < TimeMS)											//Wait for n amount of TC overflows
 2a6:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
 2aa:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
 2ae:	2a 15       	cp	r18, r10
 2b0:	3b 05       	cpc	r19, r11
 2b2:	c8 f3       	brcs	.-14     	; 0x2a6 <__EEPROM_REGION_LENGTH__+0xa6>
				{
					//Do nothing
				}
				
				enable_DAC();	
 2b4:	0e 94 ae 00 	call	0x15c	; 0x15c <enable_DAC>
				DACA_CH0DATA = DAC_P100;											//Set to 100%
 2b8:	c0 93 18 03 	sts	0x0318, r28	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 2bc:	d0 93 19 03 	sts	0x0319, r29	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
				stop_TIMER();
 2c0:	0e 94 9b 00 	call	0x136	; 0x136 <stop_TIMER>
				GlobOVFCnt = 0;														//Reset overflow counter
 2c4:	10 92 00 20 	sts	0x2000, r1	; 0x802000 <__DATA_REGION_ORIGIN__>
 2c8:	10 92 01 20 	sts	0x2001, r1	; 0x802001 <__DATA_REGION_ORIGIN__+0x1>
				
				write8_UART(0x0F);													//Write finished
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	0e 94 01 02 	call	0x402	; 0x402 <write8_UART>
				
				break;
 2d2:	82 cf       	rjmp	.-252    	; 0x1d8 <main+0x3a>
			
			default:																//Return error
				write8_UART(0xFF);
 2d4:	8f ef       	ldi	r24, 0xFF	; 255
 2d6:	0e 94 01 02 	call	0x402	; 0x402 <write8_UART>
				break;
 2da:	7e cf       	rjmp	.-260    	; 0x1d8 <main+0x3a>

000002dc <init_CLK>:
#include "start.h" 

void init_CLK(void)
{
	OSC.CTRL |= OSC_RC32MEN_bm;												// Enable internal 32 MHz oscillator
 2dc:	e0 e5       	ldi	r30, 0x50	; 80
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));									// Wait for oscillator is ready
 2e6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7fd851>
 2ea:	81 ff       	sbrs	r24, 1
 2ec:	fc cf       	rjmp	.-8      	; 0x2e6 <init_CLK+0xa>
	CCP = CCP_IOREG_gc;														// Security signature to modify clock
 2ee:	88 ed       	ldi	r24, 0xD8	; 216
 2f0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;										// Select 32 MHz oscillator
 2f2:	e0 e4       	ldi	r30, 0x40	; 64
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 83       	st	Z, r24
	CLK.PSCTRL = CLK_PSADIV_1_gc;											// Set PSA to 1
 2fa:	11 82       	std	Z+1, r1	; 0x01
	CLK.PSCTRL = CLK_PSBCDIV_1_1_gc;										// Set PSB&PSC to 1
 2fc:	11 82       	std	Z+1, r1	; 0x01
 2fe:	08 95       	ret

00000300 <init_ADC>:
}

void init_ADC(void)
{
	PORTA_DIRCLR = PIN3_bm;													//Set PA3 as input
 300:	88 e0       	ldi	r24, 0x08	; 8
 302:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x7fde02>
	
	ADCA.PRESCALER = (0x06);												//Set ADCA clock speed to 125kHz
 306:	e0 e0       	ldi	r30, 0x00	; 0
 308:	f2 e0       	ldi	r31, 0x02	; 2
 30a:	86 e0       	ldi	r24, 0x06	; 6
 30c:	84 83       	std	Z+4, r24	; 0x04
	ADCA.REFCTRL |= ADC_RESOLUTION_12BIT_gc;								//Set ADCA to 12bit resolution
 30e:	82 81       	ldd	r24, Z+2	; 0x02
 310:	82 83       	std	Z+2, r24	; 0x02
	ADCA.REFCTRL |= ADC_REFSEL_INTVCC_gc;									//Set ADCA reference voltage to supply voltage
 312:	82 81       	ldd	r24, Z+2	; 0x02
 314:	80 61       	ori	r24, 0x10	; 16
 316:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN3_gc;								//Multiplexes PA3 to ADCA channel 0
 318:	88 e1       	ldi	r24, 0x18	; 24
 31a:	81 a3       	std	Z+33, r24	; 0x21
	
	ADCA.CH0.CTRL |= ADC_CH_INPUTMODE_SINGLEENDED_gc;						//Set ADCA channel 0 to single ended input
 31c:	80 a1       	ldd	r24, Z+32	; 0x20
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE3_gc;						//Set ADCA channel 0 lower reference voltage to internal GND
 322:	81 a1       	ldd	r24, Z+33	; 0x21
 324:	87 60       	ori	r24, 0x07	; 7
 326:	81 a3       	std	Z+33, r24	; 0x21
 328:	08 95       	ret

0000032a <init_TIMER>:
}

void init_TIMER(void)														//Overflows every 1 ms
{
	TCC4.CTRLB = TC_WGMODE_NORMAL_gc;										//Set timer E0 to normal mode
 32a:	e0 e0       	ldi	r30, 0x00	; 0
 32c:	f8 e0       	ldi	r31, 0x08	; 8
 32e:	11 82       	std	Z+1, r1	; 0x01
	TCC4.CTRLA = TC_CLKSEL_OFF_gc;											//Timer is off until CLKSEL is changed
 330:	10 82       	st	Z, r1
	TCC4.INTCTRLA = TC_OVFINTLVL_LO_gc;										//Set overflow interrupt TCE0 to low level
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	86 83       	std	Z+6, r24	; 0x06
	TCC4.PER = 0xFA0;														//t = 1ms
 336:	80 ea       	ldi	r24, 0xA0	; 160
 338:	9f e0       	ldi	r25, 0x0F	; 15
 33a:	86 a3       	std	Z+38, r24	; 0x26
 33c:	97 a3       	std	Z+39, r25	; 0x27
 33e:	08 95       	ret

00000340 <init_DAC>:
}

void init_DAC(void)
{
	DACA.CTRLC = DAC_REFSEL_INT1V_gc;										//set DAC reference to internal 1V
 340:	e0 e0       	ldi	r30, 0x00	; 0
 342:	f3 e0       	ldi	r31, 0x03	; 3
 344:	12 82       	std	Z+2, r1	; 0x02
	DACA.CTRLB = DAC_CHSEL_SINGLE_gc;										//set DAC to channel 0 
 346:	11 82       	std	Z+1, r1	; 0x01
	DACA.CTRLA = DAC_CH0EN_bm | DAC_ENABLE_bm;								//Enable DAC 
 348:	85 e0       	ldi	r24, 0x05	; 5
 34a:	80 83       	st	Z, r24
 34c:	08 95       	ret

0000034e <Cal_supply>:
#include "supply.h"

uint16_t Cal_supply(float volt)
{
 34e:	cf 92       	push	r12
 350:	df 92       	push	r13
 352:	ef 92       	push	r14
 354:	ff 92       	push	r15
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	6b 01       	movw	r12, r22
 35c:	7c 01       	movw	r14, r24
	float ReadVolt = 0;															//Temp storage for ADC conversion
	uint16_t DacData = 0;														//Temp storage for DacData
	
	DACA.CH0DATA = DacData;														//Set DAC to 0
 35e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <__TEXT_REGION_LENGTH__+0x7fdb18>
 362:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <__TEXT_REGION_LENGTH__+0x7fdb19>
#include "supply.h"

uint16_t Cal_supply(float volt)
{
	float ReadVolt = 0;															//Temp storage for ADC conversion
	uint16_t DacData = 0;														//Temp storage for DacData
 366:	c0 e0       	ldi	r28, 0x00	; 0
 368:	d0 e0       	ldi	r29, 0x00	; 0
#include "supply.h"

uint16_t Cal_supply(float volt)
{
	float ReadVolt = 0;															//Temp storage for ADC conversion
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	cb 01       	movw	r24, r22
	uint16_t DacData = 0;														//Temp storage for DacData
	
	DACA.CH0DATA = DacData;														//Set DAC to 0
	
	while((ReadVolt < volt)&&(DacData < 0xFFFF))
 370:	09 c0       	rjmp	.+18     	; 0x384 <Cal_supply+0x36>
	{
		ReadVolt = read_ADC();													//Read V_out
 372:	0e 94 6a 00 	call	0xd4	; 0xd4 <read_ADC>
 376:	bc 01       	movw	r22, r24
 378:	99 0f       	add	r25, r25
 37a:	88 0b       	sbc	r24, r24
 37c:	99 0b       	sbc	r25, r25
 37e:	0e 94 8f 02 	call	0x51e	; 0x51e <__floatsisf>
		DacData++;																//Increase V_out by one DAC step	
 382:	21 96       	adiw	r28, 0x01	; 1
	float ReadVolt = 0;															//Temp storage for ADC conversion
	uint16_t DacData = 0;														//Temp storage for DacData
	
	DACA.CH0DATA = DacData;														//Set DAC to 0
	
	while((ReadVolt < volt)&&(DacData < 0xFFFF))
 384:	a7 01       	movw	r20, r14
 386:	96 01       	movw	r18, r12
 388:	0e 94 16 02 	call	0x42c	; 0x42c <__cmpsf2>
 38c:	88 23       	and	r24, r24
 38e:	24 f4       	brge	.+8      	; 0x398 <Cal_supply+0x4a>
 390:	cf 3f       	cpi	r28, 0xFF	; 255
 392:	8f ef       	ldi	r24, 0xFF	; 255
 394:	d8 07       	cpc	r29, r24
 396:	69 f7       	brne	.-38     	; 0x372 <Cal_supply+0x24>
		ReadVolt = read_ADC();													//Read V_out
		DacData++;																//Increase V_out by one DAC step	
	}
	
	return DacData;																//Return DAC data for V_out is ~volt
}
 398:	ce 01       	movw	r24, r28
 39a:	df 91       	pop	r29
 39c:	cf 91       	pop	r28
 39e:	ff 90       	pop	r15
 3a0:	ef 90       	pop	r14
 3a2:	df 90       	pop	r13
 3a4:	cf 90       	pop	r12
 3a6:	08 95       	ret

000003a8 <init_UART>:
#include "UART.h"

void init_UART(void)
{
	PORTD_DIRCLR = PIN2_bm;												//Set RX pin USARTE0 D2 as input
 3a8:	84 e0       	ldi	r24, 0x04	; 4
 3aa:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x7fde62>
	PORTD_DIRSET = PIN3_bm;												//Set TX pin USARTE0 D3 as output
 3ae:	88 e0       	ldi	r24, 0x08	; 8
 3b0:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <__TEXT_REGION_LENGTH__+0x7fde61>
	PORTD_OUTSET = PIN3_bm;												//Set TX pin to high
 3b4:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7fde65>
		
	USARTD0.BAUDCTRLB |= (0x0D<<4);										//Set BSCALE to -3 for baud 115200
 3b8:	e0 ec       	ldi	r30, 0xC0	; 192
 3ba:	f9 e0       	ldi	r31, 0x09	; 9
 3bc:	87 81       	ldd	r24, Z+7	; 0x07
 3be:	80 6d       	ori	r24, 0xD0	; 208
 3c0:	87 83       	std	Z+7, r24	; 0x07
	USARTD0.BAUDCTRLA |= (0x83);										//Set BSEL to 131 for baud 115200	
 3c2:	86 81       	ldd	r24, Z+6	; 0x06
 3c4:	83 68       	ori	r24, 0x83	; 131
 3c6:	86 83       	std	Z+6, r24	; 0x06

	USARTD0.CTRLC |= (0x03);											//Sets amount of data bits to 8
 3c8:	84 81       	ldd	r24, Z+4	; 0x04
 3ca:	83 60       	ori	r24, 0x03	; 3
 3cc:	84 83       	std	Z+4, r24	; 0x04
	USARTD0.CTRLB |= (0x03<<3);											//Sets the Rx and TX enable bits
 3ce:	83 81       	ldd	r24, Z+3	; 0x03
 3d0:	88 61       	ori	r24, 0x18	; 24
 3d2:	83 83       	std	Z+3, r24	; 0x03
 3d4:	08 95       	ret

000003d6 <read_UART>:
}

uint8_t read_UART(void)
{
	int test = 0;
 3d6:	20 e0       	ldi	r18, 0x00	; 0
 3d8:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t garbage;
	uint8_t data;
	
	while(test==0)
 3da:	04 c0       	rjmp	.+8      	; 0x3e4 <read_UART+0xe>
	{
		test = USARTD0.STATUS&(0x80);									//keep polling until RXCIF bit is high
 3dc:	20 91 c1 09 	lds	r18, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fe1c1>
 3e0:	20 78       	andi	r18, 0x80	; 128
 3e2:	30 e0       	ldi	r19, 0x00	; 0
{
	int test = 0;
	uint8_t garbage;
	uint8_t data;
	
	while(test==0)
 3e4:	21 15       	cp	r18, r1
 3e6:	31 05       	cpc	r19, r1
 3e8:	c9 f3       	breq	.-14     	; 0x3dc <read_UART+0x6>
	{
		test = USARTD0.STATUS&(0x80);									//keep polling until RXCIF bit is high
	}
	
	data = USARTD0.DATA;												//read the data from the data RX/TX register
 3ea:	80 91 c0 09 	lds	r24, 0x09C0	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fe1c0>
	
	while(test!=0)
 3ee:	06 c0       	rjmp	.+12     	; 0x3fc <read_UART+0x26>
	{
		test = USARTD0.STATUS&(0x80);									//keep polling until RXCIF bit is low
 3f0:	e0 ec       	ldi	r30, 0xC0	; 192
 3f2:	f9 e0       	ldi	r31, 0x09	; 9
 3f4:	21 81       	ldd	r18, Z+1	; 0x01
 3f6:	20 78       	andi	r18, 0x80	; 128
 3f8:	30 e0       	ldi	r19, 0x00	; 0
		garbage = USARTD0.DATA;											//read the data until register is automatically cleared
 3fa:	90 81       	ld	r25, Z
		test = USARTD0.STATUS&(0x80);									//keep polling until RXCIF bit is high
	}
	
	data = USARTD0.DATA;												//read the data from the data RX/TX register
	
	while(test!=0)
 3fc:	23 2b       	or	r18, r19
 3fe:	c1 f7       	brne	.-16     	; 0x3f0 <read_UART+0x1a>
		test = USARTD0.STATUS&(0x80);									//keep polling until RXCIF bit is low
		garbage = USARTD0.DATA;											//read the data until register is automatically cleared
	}
	
	return data;														//returns 8bit received data
}
 400:	08 95       	ret

00000402 <write8_UART>:

void write8_UART(uint8_t data)
{
	int test = 0;
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
	while(test==0)
 406:	04 c0       	rjmp	.+8      	; 0x410 <write8_UART+0xe>
	{
		test = USARTD0.STATUS&(0x20);									//keep polling until the data register is ready to receive new data
 408:	20 91 c1 09 	lds	r18, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fe1c1>
 40c:	20 72       	andi	r18, 0x20	; 32
 40e:	30 e0       	ldi	r19, 0x00	; 0
}

void write8_UART(uint8_t data)
{
	int test = 0;
	while(test==0)
 410:	23 2b       	or	r18, r19
 412:	d1 f3       	breq	.-12     	; 0x408 <write8_UART+0x6>
	{
		test = USARTD0.STATUS&(0x20);									//keep polling until the data register is ready to receive new data
	}
	
	USARTD0.DATA = data;												//write the 8bits to MATLAB
 414:	80 93 c0 09 	sts	0x09C0, r24	; 0x8009c0 <__TEXT_REGION_LENGTH__+0x7fe1c0>
	
	test = 0;
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
	while(test==0)
 41c:	04 c0       	rjmp	.+8      	; 0x426 <write8_UART+0x24>
	{
		test = USARTD0.STATUS&(0x20);									//keep polling until the data register is ready to receive new data
 41e:	80 91 c1 09 	lds	r24, 0x09C1	; 0x8009c1 <__TEXT_REGION_LENGTH__+0x7fe1c1>
 422:	80 72       	andi	r24, 0x20	; 32
 424:	90 e0       	ldi	r25, 0x00	; 0
	}
	
	USARTD0.DATA = data;												//write the 8bits to MATLAB
	
	test = 0;
	while(test==0)
 426:	89 2b       	or	r24, r25
 428:	d1 f3       	breq	.-12     	; 0x41e <write8_UART+0x1c>
	{
		test = USARTD0.STATUS&(0x20);									//keep polling until the data register is ready to receive new data
	}
 42a:	08 95       	ret

0000042c <__cmpsf2>:
 42c:	0e 94 ca 02 	call	0x594	; 0x594 <__fp_cmp>
 430:	08 f4       	brcc	.+2      	; 0x434 <__cmpsf2+0x8>
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	08 95       	ret

00000436 <__divsf3>:
 436:	0e 94 2f 02 	call	0x45e	; 0x45e <__divsf3x>
 43a:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_round>
 43e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscB>
 442:	58 f0       	brcs	.+22     	; 0x45a <__divsf3+0x24>
 444:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_pscA>
 448:	40 f0       	brcs	.+16     	; 0x45a <__divsf3+0x24>
 44a:	29 f4       	brne	.+10     	; 0x456 <__divsf3+0x20>
 44c:	5f 3f       	cpi	r21, 0xFF	; 255
 44e:	29 f0       	breq	.+10     	; 0x45a <__divsf3+0x24>
 450:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 454:	51 11       	cpse	r21, r1
 456:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 45a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>

0000045e <__divsf3x>:
 45e:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_split3>
 462:	68 f3       	brcs	.-38     	; 0x43e <__divsf3+0x8>

00000464 <__divsf3_pse>:
 464:	99 23       	and	r25, r25
 466:	b1 f3       	breq	.-20     	; 0x454 <__divsf3+0x1e>
 468:	55 23       	and	r21, r21
 46a:	91 f3       	breq	.-28     	; 0x450 <__divsf3+0x1a>
 46c:	95 1b       	sub	r25, r21
 46e:	55 0b       	sbc	r21, r21
 470:	bb 27       	eor	r27, r27
 472:	aa 27       	eor	r26, r26
 474:	62 17       	cp	r22, r18
 476:	73 07       	cpc	r23, r19
 478:	84 07       	cpc	r24, r20
 47a:	38 f0       	brcs	.+14     	; 0x48a <__divsf3_pse+0x26>
 47c:	9f 5f       	subi	r25, 0xFF	; 255
 47e:	5f 4f       	sbci	r21, 0xFF	; 255
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	44 1f       	adc	r20, r20
 486:	aa 1f       	adc	r26, r26
 488:	a9 f3       	breq	.-22     	; 0x474 <__divsf3_pse+0x10>
 48a:	35 d0       	rcall	.+106    	; 0x4f6 <__divsf3_pse+0x92>
 48c:	0e 2e       	mov	r0, r30
 48e:	3a f0       	brmi	.+14     	; 0x49e <__divsf3_pse+0x3a>
 490:	e0 e8       	ldi	r30, 0x80	; 128
 492:	32 d0       	rcall	.+100    	; 0x4f8 <__divsf3_pse+0x94>
 494:	91 50       	subi	r25, 0x01	; 1
 496:	50 40       	sbci	r21, 0x00	; 0
 498:	e6 95       	lsr	r30
 49a:	00 1c       	adc	r0, r0
 49c:	ca f7       	brpl	.-14     	; 0x490 <__divsf3_pse+0x2c>
 49e:	2b d0       	rcall	.+86     	; 0x4f6 <__divsf3_pse+0x92>
 4a0:	fe 2f       	mov	r31, r30
 4a2:	29 d0       	rcall	.+82     	; 0x4f6 <__divsf3_pse+0x92>
 4a4:	66 0f       	add	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	bb 1f       	adc	r27, r27
 4ac:	26 17       	cp	r18, r22
 4ae:	37 07       	cpc	r19, r23
 4b0:	48 07       	cpc	r20, r24
 4b2:	ab 07       	cpc	r26, r27
 4b4:	b0 e8       	ldi	r27, 0x80	; 128
 4b6:	09 f0       	breq	.+2      	; 0x4ba <__divsf3_pse+0x56>
 4b8:	bb 0b       	sbc	r27, r27
 4ba:	80 2d       	mov	r24, r0
 4bc:	bf 01       	movw	r22, r30
 4be:	ff 27       	eor	r31, r31
 4c0:	93 58       	subi	r25, 0x83	; 131
 4c2:	5f 4f       	sbci	r21, 0xFF	; 255
 4c4:	3a f0       	brmi	.+14     	; 0x4d4 <__divsf3_pse+0x70>
 4c6:	9e 3f       	cpi	r25, 0xFE	; 254
 4c8:	51 05       	cpc	r21, r1
 4ca:	78 f0       	brcs	.+30     	; 0x4ea <__divsf3_pse+0x86>
 4cc:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 4d0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 4d4:	5f 3f       	cpi	r21, 0xFF	; 255
 4d6:	e4 f3       	brlt	.-8      	; 0x4d0 <__divsf3_pse+0x6c>
 4d8:	98 3e       	cpi	r25, 0xE8	; 232
 4da:	d4 f3       	brlt	.-12     	; 0x4d0 <__divsf3_pse+0x6c>
 4dc:	86 95       	lsr	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b7 95       	ror	r27
 4e4:	f7 95       	ror	r31
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	c9 f7       	brne	.-14     	; 0x4dc <__divsf3_pse+0x78>
 4ea:	88 0f       	add	r24, r24
 4ec:	91 1d       	adc	r25, r1
 4ee:	96 95       	lsr	r25
 4f0:	87 95       	ror	r24
 4f2:	97 f9       	bld	r25, 7
 4f4:	08 95       	ret
 4f6:	e1 e0       	ldi	r30, 0x01	; 1
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	88 1f       	adc	r24, r24
 4fe:	bb 1f       	adc	r27, r27
 500:	62 17       	cp	r22, r18
 502:	73 07       	cpc	r23, r19
 504:	84 07       	cpc	r24, r20
 506:	ba 07       	cpc	r27, r26
 508:	20 f0       	brcs	.+8      	; 0x512 <__divsf3_pse+0xae>
 50a:	62 1b       	sub	r22, r18
 50c:	73 0b       	sbc	r23, r19
 50e:	84 0b       	sbc	r24, r20
 510:	ba 0b       	sbc	r27, r26
 512:	ee 1f       	adc	r30, r30
 514:	88 f7       	brcc	.-30     	; 0x4f8 <__divsf3_pse+0x94>
 516:	e0 95       	com	r30
 518:	08 95       	ret

0000051a <__floatunsisf>:
 51a:	e8 94       	clt
 51c:	09 c0       	rjmp	.+18     	; 0x530 <__floatsisf+0x12>

0000051e <__floatsisf>:
 51e:	97 fb       	bst	r25, 7
 520:	3e f4       	brtc	.+14     	; 0x530 <__floatsisf+0x12>
 522:	90 95       	com	r25
 524:	80 95       	com	r24
 526:	70 95       	com	r23
 528:	61 95       	neg	r22
 52a:	7f 4f       	sbci	r23, 0xFF	; 255
 52c:	8f 4f       	sbci	r24, 0xFF	; 255
 52e:	9f 4f       	sbci	r25, 0xFF	; 255
 530:	99 23       	and	r25, r25
 532:	a9 f0       	breq	.+42     	; 0x55e <__floatsisf+0x40>
 534:	f9 2f       	mov	r31, r25
 536:	96 e9       	ldi	r25, 0x96	; 150
 538:	bb 27       	eor	r27, r27
 53a:	93 95       	inc	r25
 53c:	f6 95       	lsr	r31
 53e:	87 95       	ror	r24
 540:	77 95       	ror	r23
 542:	67 95       	ror	r22
 544:	b7 95       	ror	r27
 546:	f1 11       	cpse	r31, r1
 548:	f8 cf       	rjmp	.-16     	; 0x53a <__floatsisf+0x1c>
 54a:	fa f4       	brpl	.+62     	; 0x58a <__floatsisf+0x6c>
 54c:	bb 0f       	add	r27, r27
 54e:	11 f4       	brne	.+4      	; 0x554 <__floatsisf+0x36>
 550:	60 ff       	sbrs	r22, 0
 552:	1b c0       	rjmp	.+54     	; 0x58a <__floatsisf+0x6c>
 554:	6f 5f       	subi	r22, 0xFF	; 255
 556:	7f 4f       	sbci	r23, 0xFF	; 255
 558:	8f 4f       	sbci	r24, 0xFF	; 255
 55a:	9f 4f       	sbci	r25, 0xFF	; 255
 55c:	16 c0       	rjmp	.+44     	; 0x58a <__floatsisf+0x6c>
 55e:	88 23       	and	r24, r24
 560:	11 f0       	breq	.+4      	; 0x566 <__floatsisf+0x48>
 562:	96 e9       	ldi	r25, 0x96	; 150
 564:	11 c0       	rjmp	.+34     	; 0x588 <__floatsisf+0x6a>
 566:	77 23       	and	r23, r23
 568:	21 f0       	breq	.+8      	; 0x572 <__floatsisf+0x54>
 56a:	9e e8       	ldi	r25, 0x8E	; 142
 56c:	87 2f       	mov	r24, r23
 56e:	76 2f       	mov	r23, r22
 570:	05 c0       	rjmp	.+10     	; 0x57c <__floatsisf+0x5e>
 572:	66 23       	and	r22, r22
 574:	71 f0       	breq	.+28     	; 0x592 <__floatsisf+0x74>
 576:	96 e8       	ldi	r25, 0x86	; 134
 578:	86 2f       	mov	r24, r22
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	2a f0       	brmi	.+10     	; 0x58a <__floatsisf+0x6c>
 580:	9a 95       	dec	r25
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	da f7       	brpl	.-10     	; 0x580 <__floatsisf+0x62>
 58a:	88 0f       	add	r24, r24
 58c:	96 95       	lsr	r25
 58e:	87 95       	ror	r24
 590:	97 f9       	bld	r25, 7
 592:	08 95       	ret

00000594 <__fp_cmp>:
 594:	99 0f       	add	r25, r25
 596:	00 08       	sbc	r0, r0
 598:	55 0f       	add	r21, r21
 59a:	aa 0b       	sbc	r26, r26
 59c:	e0 e8       	ldi	r30, 0x80	; 128
 59e:	fe ef       	ldi	r31, 0xFE	; 254
 5a0:	16 16       	cp	r1, r22
 5a2:	17 06       	cpc	r1, r23
 5a4:	e8 07       	cpc	r30, r24
 5a6:	f9 07       	cpc	r31, r25
 5a8:	c0 f0       	brcs	.+48     	; 0x5da <__fp_cmp+0x46>
 5aa:	12 16       	cp	r1, r18
 5ac:	13 06       	cpc	r1, r19
 5ae:	e4 07       	cpc	r30, r20
 5b0:	f5 07       	cpc	r31, r21
 5b2:	98 f0       	brcs	.+38     	; 0x5da <__fp_cmp+0x46>
 5b4:	62 1b       	sub	r22, r18
 5b6:	73 0b       	sbc	r23, r19
 5b8:	84 0b       	sbc	r24, r20
 5ba:	95 0b       	sbc	r25, r21
 5bc:	39 f4       	brne	.+14     	; 0x5cc <__fp_cmp+0x38>
 5be:	0a 26       	eor	r0, r26
 5c0:	61 f0       	breq	.+24     	; 0x5da <__fp_cmp+0x46>
 5c2:	23 2b       	or	r18, r19
 5c4:	24 2b       	or	r18, r20
 5c6:	25 2b       	or	r18, r21
 5c8:	21 f4       	brne	.+8      	; 0x5d2 <__fp_cmp+0x3e>
 5ca:	08 95       	ret
 5cc:	0a 26       	eor	r0, r26
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__fp_cmp+0x3e>
 5d0:	a1 40       	sbci	r26, 0x01	; 1
 5d2:	a6 95       	lsr	r26
 5d4:	8f ef       	ldi	r24, 0xFF	; 255
 5d6:	81 1d       	adc	r24, r1
 5d8:	81 1d       	adc	r24, r1
 5da:	08 95       	ret

000005dc <__fp_inf>:
 5dc:	97 f9       	bld	r25, 7
 5de:	9f 67       	ori	r25, 0x7F	; 127
 5e0:	80 e8       	ldi	r24, 0x80	; 128
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	60 e0       	ldi	r22, 0x00	; 0
 5e6:	08 95       	ret

000005e8 <__fp_nan>:
 5e8:	9f ef       	ldi	r25, 0xFF	; 255
 5ea:	80 ec       	ldi	r24, 0xC0	; 192
 5ec:	08 95       	ret

000005ee <__fp_pscA>:
 5ee:	00 24       	eor	r0, r0
 5f0:	0a 94       	dec	r0
 5f2:	16 16       	cp	r1, r22
 5f4:	17 06       	cpc	r1, r23
 5f6:	18 06       	cpc	r1, r24
 5f8:	09 06       	cpc	r0, r25
 5fa:	08 95       	ret

000005fc <__fp_pscB>:
 5fc:	00 24       	eor	r0, r0
 5fe:	0a 94       	dec	r0
 600:	12 16       	cp	r1, r18
 602:	13 06       	cpc	r1, r19
 604:	14 06       	cpc	r1, r20
 606:	05 06       	cpc	r0, r21
 608:	08 95       	ret

0000060a <__fp_round>:
 60a:	09 2e       	mov	r0, r25
 60c:	03 94       	inc	r0
 60e:	00 0c       	add	r0, r0
 610:	11 f4       	brne	.+4      	; 0x616 <__fp_round+0xc>
 612:	88 23       	and	r24, r24
 614:	52 f0       	brmi	.+20     	; 0x62a <__fp_round+0x20>
 616:	bb 0f       	add	r27, r27
 618:	40 f4       	brcc	.+16     	; 0x62a <__fp_round+0x20>
 61a:	bf 2b       	or	r27, r31
 61c:	11 f4       	brne	.+4      	; 0x622 <__fp_round+0x18>
 61e:	60 ff       	sbrs	r22, 0
 620:	04 c0       	rjmp	.+8      	; 0x62a <__fp_round+0x20>
 622:	6f 5f       	subi	r22, 0xFF	; 255
 624:	7f 4f       	sbci	r23, 0xFF	; 255
 626:	8f 4f       	sbci	r24, 0xFF	; 255
 628:	9f 4f       	sbci	r25, 0xFF	; 255
 62a:	08 95       	ret

0000062c <__fp_split3>:
 62c:	57 fd       	sbrc	r21, 7
 62e:	90 58       	subi	r25, 0x80	; 128
 630:	44 0f       	add	r20, r20
 632:	55 1f       	adc	r21, r21
 634:	59 f0       	breq	.+22     	; 0x64c <__fp_splitA+0x10>
 636:	5f 3f       	cpi	r21, 0xFF	; 255
 638:	71 f0       	breq	.+28     	; 0x656 <__fp_splitA+0x1a>
 63a:	47 95       	ror	r20

0000063c <__fp_splitA>:
 63c:	88 0f       	add	r24, r24
 63e:	97 fb       	bst	r25, 7
 640:	99 1f       	adc	r25, r25
 642:	61 f0       	breq	.+24     	; 0x65c <__fp_splitA+0x20>
 644:	9f 3f       	cpi	r25, 0xFF	; 255
 646:	79 f0       	breq	.+30     	; 0x666 <__fp_splitA+0x2a>
 648:	87 95       	ror	r24
 64a:	08 95       	ret
 64c:	12 16       	cp	r1, r18
 64e:	13 06       	cpc	r1, r19
 650:	14 06       	cpc	r1, r20
 652:	55 1f       	adc	r21, r21
 654:	f2 cf       	rjmp	.-28     	; 0x63a <__fp_split3+0xe>
 656:	46 95       	lsr	r20
 658:	f1 df       	rcall	.-30     	; 0x63c <__fp_splitA>
 65a:	08 c0       	rjmp	.+16     	; 0x66c <__fp_splitA+0x30>
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	99 1f       	adc	r25, r25
 664:	f1 cf       	rjmp	.-30     	; 0x648 <__fp_splitA+0xc>
 666:	86 95       	lsr	r24
 668:	71 05       	cpc	r23, r1
 66a:	61 05       	cpc	r22, r1
 66c:	08 94       	sec
 66e:	08 95       	ret

00000670 <__fp_zero>:
 670:	e8 94       	clt

00000672 <__fp_szero>:
 672:	bb 27       	eor	r27, r27
 674:	66 27       	eor	r22, r22
 676:	77 27       	eor	r23, r23
 678:	cb 01       	movw	r24, r22
 67a:	97 f9       	bld	r25, 7
 67c:	08 95       	ret

0000067e <__mulsf3>:
 67e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__mulsf3x>
 682:	0c 94 05 03 	jmp	0x60a	; 0x60a <__fp_round>
 686:	0e 94 f7 02 	call	0x5ee	; 0x5ee <__fp_pscA>
 68a:	38 f0       	brcs	.+14     	; 0x69a <__mulsf3+0x1c>
 68c:	0e 94 fe 02 	call	0x5fc	; 0x5fc <__fp_pscB>
 690:	20 f0       	brcs	.+8      	; 0x69a <__mulsf3+0x1c>
 692:	95 23       	and	r25, r21
 694:	11 f0       	breq	.+4      	; 0x69a <__mulsf3+0x1c>
 696:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 69a:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_nan>
 69e:	11 24       	eor	r1, r1
 6a0:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>

000006a4 <__mulsf3x>:
 6a4:	0e 94 16 03 	call	0x62c	; 0x62c <__fp_split3>
 6a8:	70 f3       	brcs	.-36     	; 0x686 <__mulsf3+0x8>

000006aa <__mulsf3_pse>:
 6aa:	95 9f       	mul	r25, r21
 6ac:	c1 f3       	breq	.-16     	; 0x69e <__mulsf3+0x20>
 6ae:	95 0f       	add	r25, r21
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	55 1f       	adc	r21, r21
 6b4:	62 9f       	mul	r22, r18
 6b6:	f0 01       	movw	r30, r0
 6b8:	72 9f       	mul	r23, r18
 6ba:	bb 27       	eor	r27, r27
 6bc:	f0 0d       	add	r31, r0
 6be:	b1 1d       	adc	r27, r1
 6c0:	63 9f       	mul	r22, r19
 6c2:	aa 27       	eor	r26, r26
 6c4:	f0 0d       	add	r31, r0
 6c6:	b1 1d       	adc	r27, r1
 6c8:	aa 1f       	adc	r26, r26
 6ca:	64 9f       	mul	r22, r20
 6cc:	66 27       	eor	r22, r22
 6ce:	b0 0d       	add	r27, r0
 6d0:	a1 1d       	adc	r26, r1
 6d2:	66 1f       	adc	r22, r22
 6d4:	82 9f       	mul	r24, r18
 6d6:	22 27       	eor	r18, r18
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	62 1f       	adc	r22, r18
 6de:	73 9f       	mul	r23, r19
 6e0:	b0 0d       	add	r27, r0
 6e2:	a1 1d       	adc	r26, r1
 6e4:	62 1f       	adc	r22, r18
 6e6:	83 9f       	mul	r24, r19
 6e8:	a0 0d       	add	r26, r0
 6ea:	61 1d       	adc	r22, r1
 6ec:	22 1f       	adc	r18, r18
 6ee:	74 9f       	mul	r23, r20
 6f0:	33 27       	eor	r19, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	23 1f       	adc	r18, r19
 6f8:	84 9f       	mul	r24, r20
 6fa:	60 0d       	add	r22, r0
 6fc:	21 1d       	adc	r18, r1
 6fe:	82 2f       	mov	r24, r18
 700:	76 2f       	mov	r23, r22
 702:	6a 2f       	mov	r22, r26
 704:	11 24       	eor	r1, r1
 706:	9f 57       	subi	r25, 0x7F	; 127
 708:	50 40       	sbci	r21, 0x00	; 0
 70a:	9a f0       	brmi	.+38     	; 0x732 <__mulsf3_pse+0x88>
 70c:	f1 f0       	breq	.+60     	; 0x74a <__mulsf3_pse+0xa0>
 70e:	88 23       	and	r24, r24
 710:	4a f0       	brmi	.+18     	; 0x724 <__mulsf3_pse+0x7a>
 712:	ee 0f       	add	r30, r30
 714:	ff 1f       	adc	r31, r31
 716:	bb 1f       	adc	r27, r27
 718:	66 1f       	adc	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	91 50       	subi	r25, 0x01	; 1
 720:	50 40       	sbci	r21, 0x00	; 0
 722:	a9 f7       	brne	.-22     	; 0x70e <__mulsf3_pse+0x64>
 724:	9e 3f       	cpi	r25, 0xFE	; 254
 726:	51 05       	cpc	r21, r1
 728:	80 f0       	brcs	.+32     	; 0x74a <__mulsf3_pse+0xa0>
 72a:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_inf>
 72e:	0c 94 39 03 	jmp	0x672	; 0x672 <__fp_szero>
 732:	5f 3f       	cpi	r21, 0xFF	; 255
 734:	e4 f3       	brlt	.-8      	; 0x72e <__mulsf3_pse+0x84>
 736:	98 3e       	cpi	r25, 0xE8	; 232
 738:	d4 f3       	brlt	.-12     	; 0x72e <__mulsf3_pse+0x84>
 73a:	86 95       	lsr	r24
 73c:	77 95       	ror	r23
 73e:	67 95       	ror	r22
 740:	b7 95       	ror	r27
 742:	f7 95       	ror	r31
 744:	e7 95       	ror	r30
 746:	9f 5f       	subi	r25, 0xFF	; 255
 748:	c1 f7       	brne	.-16     	; 0x73a <__mulsf3_pse+0x90>
 74a:	fe 2b       	or	r31, r30
 74c:	88 0f       	add	r24, r24
 74e:	91 1d       	adc	r25, r1
 750:	96 95       	lsr	r25
 752:	87 95       	ror	r24
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret

00000758 <_exit>:
 758:	f8 94       	cli

0000075a <__stop_program>:
 75a:	ff cf       	rjmp	.-2      	; 0x75a <__stop_program>
